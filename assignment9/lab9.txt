LAB 9

First, I need to get a copy of the Diffutils repository. I do this using the 
following command:

git clone https://git.savannah.gnu.org/git/diffutils.git

Now I change my directory to the diffutils directory:

cd diffutils

To obtain the log of changes made, we use git log, and we
stdout the output to another file called git-log.txt:

git log > git-log.txt

To obtain the list of tags used for Diffutils and save it
into a file, I use the following command:

git tag > git-tags.txt

Now I open git-log.txt in vim, and press / to search for 
“maint: quote” and press enter. I scroll up to the commit
ID and yank it. I then exit vim using :wq.

I obtained the following commit ID:
62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f

I generate a patch for that commit using:

git format-patch -1 —stdout > quote-patch.txt 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f

This produced a file called quote-patch.txt

Now I need to checkout version 3.0 of Diffutils. To do this,
I use the following command:

git checkout v3.0 -b temp

I used the -b flag since I wanted a new branch named temp.
I found out the exact tag for version 3.0 using git-tags.txt

I get the output:

Switched to new branch “temp”

I type in git status, to see the untracked files. I get:
git-log.txt
git-tags.txt
quote-patch.txt

Now I apply the patch using the following command:

patch -p1 < quote-patch.txt

When it asks me for file to patch, I press enter and press
y for skipping that file. I had to do this 3 times.

When I do git status now, I can see a lot of untracked files:

On branch temp
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
	modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tags.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig

A lot of files were clearly modified because of the patch.



emacs src/analyze.c

C-x v =

This opens the diff patch in the mini buffer.

C-h m

This opens help and tells me what I can do in the diff mode.

I exit out of emacs using C-x C-c

Now I have to revert changes in all of the modified files without .c extension.
So I open all of the fitting files and press C-x v u to revert changes.
I then press C-x C-c to save and exit each file.

After repeating this procedure on each file which is not .c, I do:

git status

This time, the only modified files shown are files with .c extension.

For all the files that do have a .c extension we go through the diff file
and apply diff-apply-hunk by going to the relevant hunks that are basically
constant C-strings (comments) and use C-u C-c C-a to undo the hunk. We manually go through all the .c files and apply the changes as necessary, 
taking care not to change any of the patched source code.

Then for the rejected files, we need to manually replace the grave accent with
the apostrophe.

Now we need to get rid of the untracked files. We do so by using:
git clean -f
This force removes all the untracked files.
When we do a git status, we only see the .c files in the modified section:

#	modified:   src/cmp.c
#	modified:   src/diff.c
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/sdiff.c
#	modified:   src/util.c

We create a new patchfile with the newly changed diffutils using:

git diff > quote-3.0-patch.txt

Then we run the following commands as according to the README-hacking
file:

./bootstrap
./configure
make
make check

Now we have an executable of our modified diffutils ready. We test this using:

diff . -
diff —help

In the output, the command uses ‘’ instead of ``, hence indicating the success of
the patch.

For the sanity check, we try to compare the new diffutils version with the 
unmodified one. We do this by adding and committing our changes as a new
branch called modifiedGraves and then checkout v3.0, thus getting us
a version of diffutils with unmodified files. We run the modified diff through:

diffutils-3.0-patch/diff -pru diffutils-3.0 diffutils-3.0-patch/ > 
quote-3.0-orig.txt

Now we see the differences in the quote.txt’s:

diff quote-3.0-orig.txt quote-3.0-patch.txt

The files generated are not identical. We see that all the differences
are to do with the changes in grave accents and apostrophes, and 
that too in output of the program. Hence, we can say that the 
result of our patch was innocuous.





